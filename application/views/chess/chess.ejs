<!DOCTYPE html>
<html>

<head>
  <title>Chess</title>

  <link rel="stylesheet" type="text/css" href="../css/chess.css">
  <link rel="stylesheet" href="chessboard-1.0.0.min.css">
  <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
  <script src="chessboard-1.0.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.js"></script>
  <script src="chess.js"></script>
  <script src="/js/deparam.js"></script>

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
  integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" />

</head>

<body>
  <div class="container-fluid">
    <!-- Chat + Movelist + Controls -->
    <div class="row ">
      <div class="col-4" style="border:solid;background-color:grey">
        <div class="container" >
          <div class="row">
            <!-- Status + Player Turn + Button Col -->
            <div class="col" >
              <!-- Status -->
              <div class="row" style="align-items: center" >
                <h5>Status:</h5>
                <div id="status"></div>
              </div>
              <!-- Player Turn -->
              <div class="row">
                <h5>Player Turn:</h5>
                <div id="playturn"></div>
              </div>
              <hr/>
              <!-- Button -->
              <button class="btn btn-block btn-danger" style="font-size:90%" onclick="leaveGame()">Leave Game</button>
              <hr/>
            </div>
            <!-- Movelist Col -->
            <div class="col">
              <h5>Move List:</h5>
              <div class="row" style="height:100%">
                <div id="pgn" class=" boxscroll" style="margin:10 px; margin-bottom: 15px;"></div>
              </div>
            </div>
          </div>
        </div>
        <hr/>
        <!-- Chat -->
        <div class="col">
          <div class="row">
            <div id="show_comments" class="pre-scrollable" ></div>
            <div class="flexContainer">
              <input id="comment" placeholder="Message" class="inputField"></input>
              <button id="add_message">Send</button>
            </div>
          </div>
        </div>
      </div>
      <!-- Chessboard -->
      <div class="col-8 ml-auto">
        <div class="row">
          <div id="myBoard" style="width: 100vh"></div>
        </div>
      </div>
    </div>
  </div>

  <script>

  var board = null;
  var game = new Chess();
  var $status = $("#status");
  var $playturn = $("#playturn");
  var $pgn = $("#pgn");

  var x = game.load("<%= fen %>");
  game.header((<%= player %> == 2) ? 'Black': 'White');
  console.log(x);
  console.log("Logging fen received by chess.ejs: %s","<%= fen %>" );
  console.log("The player id is " + <%= user_id %>);
  console.log("The player number is " + <%= player %>);
  console.log(game.ascii());


  function onDragStart(source, piece, position, orientation) {
    // do not pick up pieces if the game is over
    if (game.game_over()) return false;

    // only pick up pieces for the side to move
    if (
      (game.turn() === "w" && piece.search(/^b/) !== -1) ||
      (game.turn() === "b" && piece.search(/^w/) !== -1) ||
      //checks to make sure only white can moves whites pieces etc
      (game.turn() === "w" && <%= player %> == 2) ||
      (game.turn() === "b" && <%= player %> == 1)
    ) {
      return false;
    }
  }

  function onDrop(source, target) {
    // see if the move is legal
    var move = game.move({
      from: source,
      to: target,
      promotion: "q" // NOTE: always promote to a queen for example simplicity
    });

    // illegal move
    if (move === null) return "snapback";
    else {
      //sends move to the other player
      socket.emit('move', move);
      //sends move to the database
      makeMove();
    }
    updateStatus();
  }

  // update the board position after the piece snap
  // for castling, en passant, pawn promotion
  function onSnapEnd() {
    board.position(game.fen());
  }

  function updateStatus() {
    var status = "";

    var moveColor = "White";
    if (game.turn() === "b") {
      moveColor = "Black";
    }

    // checkmate?
    if (game.in_checkmate()) {
      status = "Game over, " + moveColor + " is in checkmate.";
    }

    // draw?
    else if (game.in_draw()) {
      status = "Game over, drawn position";
    }

    // game still on
    else {
      status = "Playing";
      playturn = moveColor;
      // status = moveColor + " to move";

      // check?
      if (game.in_check()) {
        status = moveColor + " is in check";
      }
    }

    $status.html(status);
    $playturn.html(playturn);
    //use html5 sessionStorage to store games list
    //list persists as long is window is open (persists through leave game/rejoin game)
    if (sessionStorage) $pgn.html(sessionStorage.getItem("<%= game_id %>"));
    var parseMoves = game.history({verbose: true});
    if (parseMoves.length > 0){
      $pgn.append(parseMoves[parseMoves.length - 1].color + " ---> " + parseMoves[parseMoves.length - 1].san + "<br/>");
      if (sessionStorage) sessionStorage.setItem("<%= game_id %>", $pgn.html());
    }
    $("#pgn").scrollTop($("#pgn")[0].scrollHeight);
  }

  var config = {
    draggable: true,
    position: game.fen(),
    onDragStart: onDragStart,
    onDrop: onDrop,
    onSnapEnd: onSnapEnd,
    //orients the board according to the player
    orientation: (<%= player %> == 2) ? 'black': 'white'
  };
  board = Chessboard("myBoard", config);

  updateStatus();

  //since game moves are stored in db in real time, leave simply redirects to home
  function leaveGame(){
    fetch('/leave')
    .then(res => location.href = ('/leave') );
  }

  //stores game.fen() in Chess table in database
  function makeMove(){
    fetch(location.href, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({"game_fen": game.fen()}),
    });
  }

  var socket = io();
  
  socket.on('move', function(move){
    game.move(move);
    board.position(game.fen(), false);
    updateStatus();
  });

  var params = jQuery.deparam(window.location.search);
  socket.emit('join', params, function(err) {
    if (err) {
      alert(err);
      window.location.href = '/';
    } else {
      console.log('No error');
    }
  })

  $("#add_message").click(function () {
    socket.emit('createMessage', params, $("#comment").val());
  });

  socket.on('newMessage', function (message) {
    $("#show_comments").append("User " + <%= user_id %> + " : " +message + '<br /><br />');
  });

  </script>
</body>

</html>
